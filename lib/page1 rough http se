// ignore_for_file: non_constant_identifier_names, camel_case_types

import 'dart:convert';
import 'package:http/http.dart' as http;

// import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutterassignmentkrityuk/provider.dart';
import 'package:provider/provider.dart';

import 'global.dart';
import 'widgets/MyWidget.dart';
import 'widgets/TileWidget.dart';

class Page1 extends StatefulWidget {
  const Page1({Key? key}) : super(key: key);

  @override
  State<Page1> createState() => _Page1State();
}

class _Page1State extends State<Page1> {
  List<dynamic>? jsonData1;
  List<dynamic>? jsonData2;
  var isLoaded = false;

  @override
  void initState() {
    super.initState();
    fetchApiData();
    // debugPrint('value is ${jsonData1![0]['id']}');
    // debugPrint('value is ${jsonData2![0]['id']}');
    //debugPrint is here just to check that api data came here or not
  }

  fetchApiData() async {
    try {
      var response = await http.get(Uri.parse(
          'https://632017e19f82827dcf24a655.mockapi.io/api/programs'));
      if (response.statusCode == 200) {
        var json = response.body;
        jsonData1 = jsonDataFirstFromJson(json).items;
        debugPrint(
            'jsonData loaded after response200: ${jsonData1.toString()}');
        setState(() {
          isLoaded = true;
          Global.res1 = jsonData1;
        });
      } else {
        debugPrint(
            'API request failed with status code: ${response.statusCode}');
      }
    } catch (error) {
      debugPrint('Error occurred while fetching API data: $error');
    }
  }

  @override
  Widget build(BuildContext context) {
    var screenHeight = MediaQuery.of(context).size.height;
    var screenWidth = MediaQuery.of(context).size.width;
    final ProductsList = Provider.of<Products>(context).items;

    return SingleChildScrollView(
        child: Column(
      children: [
        Container(
          padding: const EdgeInsets.only(top: 10),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              IconButton(
                icon: const Icon(
                  Icons.menu,
                  color: Colors.grey,
                ),
                onPressed: () {
                  // onPressed for menu IconButton
                },
              ),
              Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  IconButton(
                    icon: const Icon(
                      Icons.chat,
                      color: Colors.grey,
                    ),
                    onPressed: () {
                      // onPressed for chat IconButton
                    },
                  ),
                  IconButton(
                    icon: const Icon(
                      Icons.notifications_outlined,
                      color: Colors.grey,
                    ),
                    onPressed: () {
                      // onPressed for alarm IconButton
                    },
                  ),
                ],
              ),
            ],
          ),
        ),
        Container(
          width: screenWidth,
          padding: const EdgeInsets.all(14),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Hello, Priya!',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 20,
                  fontFamily: 'Times New Roman',
                ),
              ),
              const SizedBox(height: 5),
              const Text(
                'What do you wanna learn today?',
                style: TextStyle(color: Colors.grey),
              ),
              SizedBox(
                height: screenHeight * 0.05,
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: const [
                  MyWidget(Icons.book, 'Programs'),
                  MyWidget(Icons.help, 'Get help'),
                ],
              ),
              const SizedBox(
                height: 10,
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: const [
                  MyWidget(Icons.menu_book_outlined, 'Learn'),
                  MyWidget(Icons.check_box_outline_blank, 'DD Tracker'),
                ],
              ),
            ],
          ),
        ),
        Container(
          decoration: const BoxDecoration(color: Colors.white),
          child: Column(
            children: [
              Padding(
                padding: const EdgeInsets.all(14),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: const [
                    Text(
                      'Programs for you',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 20,
                        fontFamily: 'Times New Roman',
                      ),
                    ),
                    Text(
                      'View all ➔',
                      style: TextStyle(color: Colors.grey),
                    )
                  ],
                ),
              ),
              //************ */
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 14),
                height: screenHeight * 0.45,
                width: double.infinity,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: ProductsList.length,
                  itemBuilder: (context, index) {
                    return Container(
                      height: screenHeight * 0.45,
                      width: screenWidth * 0.7,
                      margin: const EdgeInsets.only(
                        top: 10,
                        right: 20,
                        bottom: 20,
                      ),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(15),
                        border: Border.all(color: Colors.grey.withOpacity(0.2)),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.02),
                            spreadRadius: 2,
                            blurRadius: 5,
                            offset: const Offset(0, 2),
                            // Offset in the bottom-right direction
                          ),
                        ],
                      ),
                      child: (isLoaded)
                          ? ProductTile(
                              product1: ProductsList[0],
                              index: index,
                              jsonData: jsonData1
                              // product1: ProductsList[index], likha tha pehle
                              )
                          : const CircularProgressIndicator(),
                    );
                  },
                ),
              ),

              //********************************************* */
              Padding(
                padding: const EdgeInsets.all(14),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: const [
                    Text(
                      'Events and experiences',
                      style:
                          TextStyle(fontWeight: FontWeight.bold, fontSize: 20),
                    ),
                    Text(
                      'View all ➔',
                      style: TextStyle(color: Colors.grey),
                    )
                  ],
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 14),
                height: screenHeight * 0.45,
                width: double.infinity,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: ProductsList.length,
                  itemBuilder: (context, index) {
                    return Container(
                      height: screenHeight * 0.45,
                      width: screenWidth * 0.7,
                      margin: const EdgeInsets.only(
                        top: 10,
                        right: 20,
                        bottom: 20,
                      ),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.black),
                      ),
                      child: isLoaded
                          ? ProductTile(
                              product1: ProductsList[1],
                              jsonData: jsonData2,
                              index: index,
                            )
                          : const CircularProgressIndicator(),
                    );
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(14),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: const [
                    Text(
                      'Lessons for you',
                      style:
                          TextStyle(fontWeight: FontWeight.bold, fontSize: 20),
                    ),
                    Text('View all ➔')
                  ],
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 14),
                height: screenHeight * 0.45,
                width: double.infinity,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: ProductsList.length,
                  itemBuilder: (context, index) {
                    return Container(
                      height: screenHeight * 0.45,
                      width: screenWidth * 0.7,
                      margin: const EdgeInsets.only(
                        top: 10,
                        right: 20,
                        bottom: 20,
                      ),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.black),
                      ),
                      child: isLoaded
                          ? ProductTile(
                              product1: ProductsList[2],
                              jsonData: jsonData2,
                              index: index,
                            )
                          : const CircularProgressIndicator(),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ],
    ));
  }
}

class remoteService {
  Future<JsonDataFirst?> getPosts() async {
    var client = http.Client();

    var uri =
        Uri.parse('https://632017e19f82827dcf24a655.mockapi.io/api/programs');
    var response = await client.get(uri);

    if (response.statusCode == 200) {
      var json = response.body;
      return jsonDataFirstFromJson(json);
    } else {
      return null;
    }
  }
}

// List<dynamic> myApiFromJson(String str) =>
//     List<MyApi>.from(json.decode(str).map((x) => MyApi.fromJson(x)));

// String myApiToJson(List<dynamic> data) =>
//     json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

// To parse this JSON data, do
//
//     final jsonDataFirst = jsonDataFirstFromJson(jsonString);

// import 'dart:convert';

JsonDataFirst jsonDataFirstFromJson(String str) =>
    JsonDataFirst.fromJson(json.decode(str));

String jsonDataFirstToJson(JsonDataFirst data) => json.encode(data.toJson());

class JsonDataFirst {
  String? requestId;
  List<Item>? items;
  int? count;
  String? anyKey;

  JsonDataFirst({
    this.requestId,
    this.items,
    this.count,
    this.anyKey,
  });

  factory JsonDataFirst.fromJson(Map<String, dynamic> json) => JsonDataFirst(
        requestId: json["requestId"],
        items: json["items"] == null
            ? []
            : List<Item>.from(json["items"]!.map((x) => Item.fromJson(x))),
        count: json["count"],
        anyKey: json["anyKey"],
      );

  Map<String, dynamic> toJson() => {
        "requestId": requestId,
        "items": items == null
            ? []
            : List<dynamic>.from(items!.map((x) => x.toJson())),
        "count": count,
        "anyKey": anyKey,
      };
}

class Item {
  DateTime? createdAt;
  String? name;
  String? category;
  int? lesson;
  String? id;
  String? userName;
  String? mobileNo;
  String? emailId;
  String? city;
  String? password;

  Item({
    this.createdAt,
    this.name,
    this.category,
    this.lesson,
    this.id,
    this.userName,
    this.mobileNo,
    this.emailId,
    this.city,
    this.password,
  });

  factory Item.fromJson(Map<String, dynamic> json) => Item(
        createdAt: json["createdAt"] == null
            ? null
            : DateTime.parse(json["createdAt"]),
        name: json["name"],
        category: json["category"],
        lesson: json["lesson"],
        id: json["id"],
        userName: json["userName"],
        mobileNo: json["mobileNo"],
        emailId: json["emailId"],
        city: json["city"],
        password: json["password"],
      );

  Map<String, dynamic> toJson() => {
        "createdAt": createdAt?.toIso8601String(),
        "name": name,
        "category": category,
        "lesson": lesson,
        "id": id,
        "userName": userName,
        "mobileNo": mobileNo,
        "emailId": emailId,
        "city": city,
        "password": password,
      };
}

class Page2 extends StatelessWidget {
  const Page2({super.key});
  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text('Page 2'),
    );
  }
}

class Page3 extends StatelessWidget {
  const Page3({super.key});
  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text('Page 3'),
    );
  }
}

class Page4 extends StatelessWidget {
  const Page4({super.key});
  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text('Page 4'),
    );
  }
}

class Page5 extends StatelessWidget {
  const Page5({super.key});
  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text('Page 5'),
    );
  }
}
